#!/usr/bin/perl
# use strict;
# 
#
# Parameters:
# 	autoconf
# 	config
#
# Configuration variables:
#
#	auth	username and password to connect to transmission as "username:password"

my $username = $ENV{'username'} || '';
my $password = $ENV{'password'} || '';


#if (exists $ARGV[0] and $ARGV[0] eq "autoconf") {
#	my $test = `transmission-remote $auth -st 2>&1`;
#	if ($? == 0) {
#		print "yes\n";
#	} else {
#		print "no ($test)\n";
#	}
	#exit 0;
#}

#output configuration and exit - required by Munin
if (exists $ARGV[0] and $ARGV[0] eq "config") {
    print "graph_title Transmission traffic\n"; 
    print "graph_category torrent\n";
    print "graph_vlabel Bytes\n";
    #print "graph_info \n";
    print "graph_order down up\n";
    print "graph_args --base 1024\n";

    print "down.label Download\n";
    print "down.draw LINE1\n";
    print "down.type COUNTER\n";
    print "down.min 0\n";
    
    print "down.graph no\n";
    print "down.cdef down,8,*\n";
    

    print "up.label Bps\n";
    print "up.draw LINE1\n";
    print "up.type COUNTER\n";
    print "up.min 0\n";
    
    print "up.negative down\n";
    print "up.cdef up,8,*\n";
    

    exit 0;

}


if (exists $ARGV[0] and $ARGV[0] eq "autoconf") {
	use JSON::RPC::Client;

	my $host='127.0.0.1';
	my $port=9091;
	my $uri = "http://$host:$port/transmission/rpc";
	my $client = new JSON::RPC::Client;

	opendir(DIR, $path);
	my @files= readdir(DIR);
	closedir(DIR);

	$client->ua->credentials("$host:$port",'Transmission',$username,$password);

	my @content;
	$content[0] = $client->ua->get("http://$host:$port/transmission/rpc")->content;
	print $content;
	@content = split('<code>X-Transmission-Session-Id: ',$content[0]);
	@content = split('</code>',$content[1]);
	$client->ua->default_header('X-Transmission-Session-Id'=>"$content[0]");

	my $obj = {
	   method  => 'session-stats',
	   arguments  => {}
	};

	my $res = $client->call( $uri, $obj ) || die $! . " $uri\n";
	

	printf("up.value %d\n", $res->content->{'arguments'}->{'cumulative-stats'}->{'uploadedBytes'});
	printf("down.value %d\n", $res->content->{'arguments'}->{'cumulative-stats'}->{'downloadedBytes'});

	exit 0;
}


#Scaled to get results in MiB
my %units = ('KiB' => 1024, 'MiB' => 1048576, 'GiB' => 1073741824, 'TiB' => 1099511627776, 'PiB' => 1125899906842624);

# Get 10 (for future compat just in case) lines after TOTAl
my $status = `transmission-remote $auth -st | grep -A 10 TOTAL`;

if ($status =~ /Uploaded:\s*([0-9.]*)\s((K|M|G|T|P)iB)/) {
	my $bytes = $1;
	my $unit = $2;
	$bytes = $bytes * $units{$unit};
	
	printf("up.value %d\n", $bytes);
} else {
	print "up.value 0\n";	
}

if ($status =~ /Downloaded:\s*([0-9.]*)\s((K|M|G|T|P)iB)/) {
	my $bytes = $1;
	my $unit = $2;
	$bytes = $bytes * $units{$unit};

	printf("down.value %d\n", $bytes);
} else {
	print "down.value 0\n";	
}
exit 0;